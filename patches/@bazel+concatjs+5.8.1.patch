diff --git a/node_modules/@bazel/concatjs/internal/build_defs.bzl b/node_modules/@bazel/concatjs/internal/build_defs.bzl
index 9e5cda684f0456b61d1b6c0f9c56ae021594713f..6c45196bda5880531d32618dfca0dee44c035cb9 100755
--- a/node_modules/@bazel/concatjs/internal/build_defs.bzl
+++ b/node_modules/@bazel/concatjs/internal/build_defs.bzl
@@ -76,7 +76,7 @@ _TYPESCRIPT_TYPINGS = Label(
     "//typescript:typescript__typings",
 )

-_TYPESCRIPT_SCRIPT_TARGETS = ["es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "esnext"]
+_TYPESCRIPT_SCRIPT_TARGETS = ["es3", "es5", "es2015", "es2016", "es2017", "es2018", "es2019", "es2020", "es2022", "esnext"]
 _TYPESCRIPT_MODULE_KINDS = ["none", "commonjs", "amd", "umd", "system", "es2015", "esnext"]

 _DEVMODE_TARGET_DEFAULT = "es2015"
diff --git a/node_modules/@bazel/concatjs/internal/common/tsconfig.bzl b/node_modules/@bazel/concatjs/internal/common/tsconfig.bzl
index b01c999f5e02b388f51a508b0b608cf69db9b664..847c23fe4829d0c847e9b4bd1ad698e1ccea720e 100755
--- a/node_modules/@bazel/concatjs/internal/common/tsconfig.bzl
+++ b/node_modules/@bazel/concatjs/internal/common/tsconfig.bzl
@@ -211,9 +211,6 @@ def create_tsconfig(
         # will convert that to goog.module syntax.
         "module": "umd" if devmode_manifest or has_node_runtime else "esnext",

-        # Has no effect in closure/ES2015 mode. Always true just for simplicity.
-        "downlevelIteration": True,
-
         # Do not type-check the lib.*.d.ts.
         # We think this shouldn't be necessary but haven't figured out why yet
         # and builds are faster with the setting on.
@@ -248,13 +245,6 @@ def create_tsconfig(
         # "short name" mappings for npm packages, such as "@angular/core"
         "paths": mapped_module_roots,

-        # Inline const enums.
-        "preserveConstEnums": False,
-
-        # permit `@Decorator` syntax and allow runtime reflection on their types.
-        "experimentalDecorators": True,
-        "emitDecoratorMetadata": True,
-
         # Interpret JSX as React calls (until someone asks for something different)
         "jsx": "react",

@@ -277,12 +267,6 @@ def create_tsconfig(
         # always emit declaration files in the same location as outDir.
         "declarationDir": "/".join([workspace_path, outdir_path]),
         "stripInternal": True,
-
-        # Embed source maps and sources in .js outputs
-        "inlineSourceMap": True,
-        "inlineSources": True,
-        # Implied by inlineSourceMap: True
-        "sourceMap": False,
     }

     # "node_modules" still checked for backward compat for ng_module
diff --git a/node_modules/@bazel/concatjs/internal/tsetse/rules/must_use_promises_rule.js b/node_modules/@bazel/concatjs/internal/tsetse/rules/must_use_promises_rule.js
index e404d01cf80ab4da4b9cca89005b14a60b7d8c79..85488d9a339982af4495d2b5f4c30effb98a538b 100755
--- a/node_modules/@bazel/concatjs/internal/tsetse/rules/must_use_promises_rule.js
+++ b/node_modules/@bazel/concatjs/internal/tsetse/rules/must_use_promises_rule.js
@@ -30,6 +30,10 @@ function checkCallExpression(checker, node) {
     if (tsutils.isExpressionValueUsed(node) || !inAsyncFunction(node)) {
         return;
     }
+    // Sync behavior with @typescript-eslint/no-floating-promises
+    if (node.parent && ts.isVoidExpression(node.parent)) {
+        return;
+    }
     if (tsutils.isThenableType(checker.typeChecker, node)) {
         checker.addFailureAtNode(node, FAILURE_STRING);
     }
